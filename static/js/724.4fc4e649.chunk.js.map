{"version":3,"file":"static/js/724.4fc4e649.chunk.js","mappings":"mQAAaA,EAAe,CACxBC,MAAO,GACPC,SAAU,ICFDC,EACF,CACHC,MAAO,QACPC,KAAM,QACNC,KAAM,QACNC,YAAa,cACbC,UAAU,GANLL,EAQC,CACNC,MAAO,WACPC,KAAM,WACNC,KAAM,WACNC,YAAa,iBACbC,UAAU,G,UCUlB,EAdkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,GAA8CC,EAAAA,EAAAA,GAAQ,CAAED,SAAAA,EAAUT,aAAAA,IAA1DW,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,aAErBZ,EAAoBU,EAApBV,MAAOC,EAAaS,EAAbT,SAEf,OACI,kBAAMO,SAAUI,EAAhB,WACI,SAACC,EAAA,GAAD,QAAWC,MAAOd,EAAOe,SAAUJ,GAAkBT,KACrD,SAACW,EAAA,GAAD,QAAWC,MAAOb,EAAUc,SAAUJ,GAAkBT,KACxD,mBAAQG,KAAK,SAAb,uBCcZ,EAvBkB,WAChB,IAAMW,GAAUC,EAAAA,EAAAA,KAEVC,GAAWC,EAAAA,EAAAA,MAMjB,OAAIH,GACK,SAAC,KAAD,CAAUI,GAAG,eAIpB,2BACE,iBAAKC,UAAU,YAAf,WACE,wCACA,SAAC,EAAD,CAAWb,SAZD,SAAAc,GACdJ,GAASK,EAAAA,EAAAA,IAAMD,c,6ECdnB,EAAwB,0BAAxB,EAA0D,0BAA1D,EAA4F,0B,UCKtFT,EAAY,SAAC,GAQZ,IAPLV,EAOI,EAPJA,MACAC,EAMI,EANJA,KACAU,EAKI,EALJA,MACAC,EAII,EAJJA,SACAT,EAGI,EAHJA,YACAC,EAEI,EAFJA,SACAF,EACI,EADJA,KAEMmB,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,QAAU,IAEnC,OACE,iBAAKL,UAAWM,EAAhB,UACGxB,IACC,mBAAOkB,UAAWM,EAASC,QAASJ,EAApC,UACGrB,EADH,IACW,QAGb,kBACEkB,UAAWM,EACXH,GAAIA,EACJpB,KAAMA,EACNU,MAAOA,EACPC,SAAUA,EACVT,YAAaA,EACbC,SAAUA,EACVF,KAAMA,QAMd,IAEAQ,EAAUgB,aAAe,CACvBxB,KAAM,OACNE,UAAU,I,gECjBZ,IAvBgB,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,SAAUT,EAAkC,EAAlCA,aAAkC,IAApB+B,QAAAA,OAAoB,SAC1D,GAA0BC,EAAAA,EAAAA,WAAS,UAAIhC,IAAvC,eAAOW,EAAP,KAAcsB,EAAd,KAmBA,MAAO,CAACtB,MAAAA,EAAOsB,SAAAA,EAAUrB,aAjBJ,SAAC,GAAc,IAAbsB,EAAY,EAAZA,OACX7B,EAA+B6B,EAA/B7B,KAAMU,EAAyBmB,EAAzBnB,MAAOT,EAAkB4B,EAAlB5B,KAAM6B,EAAYD,EAAZC,QACrBC,EAAoB,aAAT9B,EAAsB6B,EAAUpB,EACjDkB,GAAS,SAAAI,GAAS,yBACXA,GADW,cAEbhC,EAAO+B,QAYuBvB,aARlB,SAACyB,GAClBA,EAAEC,iBACF9B,GAAS,UAAIE,IACVoB,GACCE,GAAS,UAAIjC","sources":["components/LoginForm/initialState.js","components/LoginForm/fields.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","webpack://goit-react-hw-08-phonebook/./src/shared/components/TextField/text-field.module.css?f04f","shared/components/TextField/TextField.jsx","shared/hooks/useForm.js"],"sourcesContent":["export const initialState = {\n    email: \"\",\n    password: \"\"\n}","export const fields = {\n    email: {\n        label: \"Email\",\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Input email\",\n        required: true,\n    },\n    password: {\n        label: \"Password\",\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Input password\",\n        required: true,\n    },\n}","import PropTypes from 'prop-types';\n\nimport useForm from \"../../shared/hooks/useForm\";\n\nimport TextField from \"../../shared/components/TextField/TextField\";\n\nimport { initialState } from \"./initialState\";\nimport { fields } from \"./fields\";\n\nconst LoginForm = ({ onSubmit }) => {\n    const { state, handleChange, handleSubmit } = useForm({ onSubmit, initialState });\n\n    const { email, password } = state;\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField value={email} onChange={handleChange} {...fields.email} />\n            <TextField value={password} onChange={handleChange} {...fields.password} />\n            <button type=\"submit\">Login</button>\n        </form>\n    )\n}\n\nexport default LoginForm;\n\nLoginForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };","import { useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport useAuth from '../../shared/hooks/useAuth';\n\nimport { login } from '../../redux/auth/auth-operations';\n\nimport LoginForm from '../../components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  const isLogin = useAuth();\n\n  const dispatch = useDispatch();\n\n  const onLogin = data => {\n    dispatch(login(data));\n  };\n\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />;\n  }\n\n  return (\n    <main>\n      <div className=\"container\">\n        <h2>Login Page</h2>\n        <LoginForm onSubmit={onLogin} />\n      </div>\n    </main>\n  );\n};\n\nexport default LoginPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"text-field_block__JkCnA\",\"label\":\"text-field_label__VYX-y\",\"input\":\"text-field_input__YM8fs\"};","import { useMemo } from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\nimport PropTypes from 'prop-types';\n\nimport s from './text-field.module.css';\n\nconst TextField = ({\n  label,\n  name,\n  value,\n  onChange,\n  placeholder,\n  required,\n  type,\n}) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <div className={s.block}>\n      {label && (\n        <label className={s.label} htmlFor={id}>\n          {label}:{' '}\n        </label>\n      )}\n      <input\n        className={s.input}\n        id={id}\n        name={name}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        required={required}\n        type={type}\n      />\n    </div>\n  );\n};\n\nexport default TextField;\n\nTextField.defaultProps = {\n  type: 'text',\n  required: false,\n};\n\nTextField.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n};\n","import {useState} from \"react\";\n\nconst useForm = ({onSubmit, initialState, isReset = true}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const { name, value, type, checked } = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        if(isReset) {\n            setState({...initialState})\n        }\n    };\n\n    return {state, setState, handleChange, handleSubmit};\n}\n\nexport default useForm;"],"names":["initialState","email","password","fields","label","name","type","placeholder","required","onSubmit","useForm","state","handleChange","handleSubmit","TextField","value","onChange","isLogin","useAuth","dispatch","useDispatch","to","className","data","login","id","useMemo","nanoid","s","htmlFor","defaultProps","isReset","useState","setState","target","checked","newValue","prevState","e","preventDefault"],"sourceRoot":""}