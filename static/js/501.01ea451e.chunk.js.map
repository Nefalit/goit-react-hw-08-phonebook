{"version":3,"file":"static/js/501.01ea451e.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/contactForm.module.css?2173","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactItem/contactItem.module.css?8044","components/ContactList/ContactItem/ContactItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/contactList.module.css?ddc0","components/ContactList/ContactList.jsx","redux/contacts/contacts-selector.js","redux/filter/filter-selector.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contactForm_form__3ay0L\",\"label\":\"contactForm_label__WakW9\",\"input\":\"contactForm_input__wCtae\",\"btn\":\"contactForm_btn__qtr3a\"};","import PropTypes from 'prop-types';\nimport { useState, memo } from 'react';\nimport s from './contactForm.module.css';\n\nconst ContactForm = ({ onSubmit }) => {\n  const [state, setState] = useState({\n    name: '',\n    number: '',\n  });\n  const { name, number } = state;\n\n  function handleChange({ target }) {\n    const { name, value } = target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({\n      name: '',\n      number: '',\n    });\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.label} htmlFor=\"\">\n        Name\n        <input\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          onChange={handleChange}\n          className={s.input}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={s.label} htmlFor=\"\">\n        Phone\n        <input\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          onChange={handleChange}\n          className={s.input}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={s.btn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default memo(ContactForm);\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"filter_wrapper__4nsU0\",\"label\":\"filter_label__nHxuJ\",\"input\":\"filter_input__sX944\",\"titleTwo\":\"filter_titleTwo__wHYmW\"};","import PropTypes from 'prop-types';\nimport s from './filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div className={s.wrapper}>\n      <h2 className={s.titleTwo}>Contacts</h2>\n      <label className={s.label}>\n        Find contacts by name\n        <input\n          value={value}\n          type=\"text\"\n          onChange={onChange}\n          className={s.input}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"items\":\"contactItem_items__CQ9jq\",\"btn\":\"contactItem_btn__rgeAk\",\"span\":\"contactItem_span__q0P-W\"};","import { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './contactItem.module.css';\n\nconst ContactItem = ({ name, number, onClick }) => {\n  return (\n    <li className={s.items}>\n      <p>\n        {name} : <span className={s.span}>{number}</span>\n      </p>\n      <button type=\"button\" className={s.btn} onClick={onClick}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default memo(ContactItem);\n// export default ContactItem\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"contactList_wrapper__coARI\",\"list\":\"contactList_list__R0BG5\"};","import PropTypes from 'prop-types';\nimport ContactItem from './ContactItem/ContactItem';\nimport s from './contactList.module.css';\n\nconst ContactList = ({ contacts, removeContact }) => {\n  const renderArr = contacts.map(({ id, name, number }) => (\n    <ContactItem\n      key={id}\n      id={id}\n      name={name}\n      number={number}\n      onClick={() => removeContact(id)}\n    />\n  ));\n  return (\n    <div className={s.wrapper}>\n      <ul className={s.list}>{renderArr}</ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  removeContact: PropTypes.func.isRequired,\n};\n","export const getContacts = store => store.contacts;\n","export const getFilter = store => store.filter;\n","import { useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport ContactList from '../../components/ContactList/ContactList';\n\nimport {\n  addContact,\n  removeContact,\n  fetchContacts,\n} from '../../redux/contacts/contacts-operation';\nimport { toFilter } from '../../redux/filter/filter-slice';\nimport { getContacts } from '../../redux/contacts/contacts-selector';\nimport { getFilter } from '../../redux/filter/filter-selector';\n\nconst ContactsPage = () => {\n  const filter = useSelector(getFilter);\n  const { items, loading, error } = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  function addContactFunc(obj) {\n    dispatch(addContact(obj));\n  }\n\n  const removeContactFunc = useCallback(\n    id => {\n      dispatch(removeContact(id));\n    },\n    [dispatch]\n  );\n\n  const handleFilter = ({ target }) => dispatch(toFilter(target.value));\n\n  function getFilteredContact() {\n    if (!filter) {\n      return items;\n    }\n    const normalizeInput = filter.toLowerCase();\n    const renderArr = items.filter(el =>\n      el.name.toLowerCase().includes(normalizeInput)\n    );\n    return renderArr;\n  }\n  const filteredContact = getFilteredContact();\n\n  return (\n    <main>\n      <div className=\"container\">\n        <h1 className=\"titleOne\">Phonebook</h1>\n        <ContactForm onSubmit={addContactFunc} />\n        <Filter value={filter} onChange={handleFilter} />\n        {loading && <p className=\"loading\">...Loading</p>}\n        {error && <p className=\"error\">Error : {error.message}</p>}\n        {error && <p className=\"error\">No access : {error.responseURL}</p>}\n        <ContactList\n          contacts={filteredContact}\n          removeContact={removeContactFunc}\n        />\n      </div>\n    </main>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactForm","onSubmit","useState","name","number","state","setState","handleChange","target","value","prevState","e","preventDefault","className","s","htmlFor","type","onChange","pattern","title","required","memo","ContactItem","onClick","contacts","removeContact","renderArr","map","id","getContacts","store","getFilter","filter","useSelector","items","loading","error","dispatch","useDispatch","useEffect","fetchContacts","removeContactFunc","useCallback","filteredContact","normalizeInput","toLowerCase","el","includes","getFilteredContact","obj","addContact","toFilter","message","responseURL"],"sourceRoot":""}