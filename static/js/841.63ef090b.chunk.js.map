{"version":3,"file":"static/js/841.63ef090b.chunk.js","mappings":"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","sources":["components/RegisterForm/fields.js","components/RegisterForm/initialState.js","webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/register-form.module.css?a013","components/RegisterForm/RegisterForm.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/RegisterPage/register-page.module.css?a0d0","pages/RegisterPage/Registerpage.jsx","webpack://goit-react-hw-08-phonebook/./src/shared/components/TextField/text-field.module.css?f04f","shared/components/TextField/TextField.jsx","shared/hooks/useForm.js"],"sourcesContent":["export const fields = {\n    name: {\n        label: \"Name\",\n        name: \"name\",\n        type: \"text\",\n        placeholder: \"Input name\",\n        required: true,\n    },\n    email: {\n        label: \"Email\",\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Input email\",\n        required: true,\n    },\n    password: {\n        label: \"Password\",\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Input password\",\n        required: true,\n    },\n}","export const initialState = {\n    name: \"\",\n    email: \"\",\n    password: \"\"\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"register-form_form__AtyVK\",\"btn\":\"register-form_btn__Gn5O+\"};","import PropTypes from 'prop-types';\n\nimport useForm from '../../shared/hooks/useForm';\n\nimport TextField from '../../shared/components/TextField/TextField';\n\nimport { fields } from './fields';\nimport { initialState } from './initialState';\n\nimport s from './register-form.module.css';\n\nconst RegisterForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    onSubmit,\n    initialState,\n  });\n\n  const { name, email, password } = state;\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <TextField value={name} onChange={handleChange} {...fields.name} />\n      <TextField value={email} onChange={handleChange} {...fields.email} />\n      <TextField\n        value={password}\n        onChange={handleChange}\n        {...fields.password}\n      />\n      <button className={s.btn} type=\"submit\">\n        Singup\n      </button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n\nRegisterForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"register-page_title__HKJZ2\"};","import { useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport useAuth from '../../shared/hooks/useAuth';\n\nimport { signup } from '../../redux/auth/auth-operations';\n\nimport RegisterForm from '../../components/RegisterForm/RegisterForm';\nimport { getAuth } from '../../redux/auth/auth-selectors';\nimport s from \"./register-page.module.css\"\n\nconst RegisterPage = () => {\n  const isLogin = useAuth();\n  const { error, loading } = useSelector(getAuth);\n\n  const dispatch = useDispatch();\n\n  const onSignup = data => {\n    dispatch(signup(data));\n  };\n\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />;\n  }\n\n  return (\n    <main>\n      <div className=\"container\">\n        <h2 className={s.title}>Register Page</h2>\n        <RegisterForm onSubmit={onSignup} />\n        {loading && <p className=\"loading\">...Loading</p>}\n        {error && <p className=\"error\">Error : {error.message}</p>}\n        {error && <p className=\"error\">{error.messageForUser}</p>}\n      </div>\n    </main>\n  );\n};\n\nexport default RegisterPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"text-field_block__JkCnA\",\"label\":\"text-field_label__VYX-y\",\"input\":\"text-field_input__YM8fs\"};","import { useMemo } from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\nimport PropTypes from 'prop-types';\n\nimport s from './text-field.module.css';\n\nconst TextField = ({\n  label,\n  name,\n  value,\n  onChange,\n  placeholder,\n  required,\n  type,\n}) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <div className={s.block}>\n      {label && (\n        <label className={s.label} htmlFor={id}>\n          {label}:{' '}\n        </label>\n      )}\n      <input\n        className={s.input}\n        id={id}\n        name={name}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        required={required}\n        type={type}\n      />\n    </div>\n  );\n};\n\nexport default TextField;\n\nTextField.defaultProps = {\n  type: 'text',\n  required: false,\n};\n\nTextField.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n};\n","import {useState} from \"react\";\n\nconst useForm = ({onSubmit, initialState, isReset = true}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const { name, value, type, checked } = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        if(isReset) {\n            setState({...initialState})\n        }\n    };\n\n    return {state, setState, handleChange, handleSubmit};\n}\n\nexport default useForm;"],"names":["fields","label","name","type","placeholder","required","initialState","email","password","onSubmit","useForm","state","handleChange","handleSubmit","className","s","TextField","value","onChange","isLogin","useAuth","useSelector","getAuth","error","loading","dispatch","useDispatch","to","data","signup","message","messageForUser","id","useMemo","nanoid","htmlFor","defaultProps","isReset","useState","setState","target","checked","newValue","prevState","e","preventDefault"],"sourceRoot":""}